// Code generated by mockery v2.23.2. DO NOT EDIT.

package mocks

import (
	context "context"

	ec2metadata "github.com/aws/aws-sdk-go/aws/ec2metadata"

	mock "github.com/stretchr/testify/mock"
)

// IEC2MdsSdkClient is an autogenerated mock type for the IEC2MdsSdkClient type
type IEC2MdsSdkClient struct {
	mock.Mock
}

// GetInstanceIdentityDocument provides a mock function with given fields:
func (_m *IEC2MdsSdkClient) GetInstanceIdentityDocument() (ec2metadata.EC2InstanceIdentityDocument, error) {
	ret := _m.Called()

	var r0 ec2metadata.EC2InstanceIdentityDocument
	var r1 error
	if rf, ok := ret.Get(0).(func() (ec2metadata.EC2InstanceIdentityDocument, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() ec2metadata.EC2InstanceIdentityDocument); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ec2metadata.EC2InstanceIdentityDocument)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceIdentityDocumentWithContext provides a mock function with given fields: ctx
func (_m *IEC2MdsSdkClient) GetInstanceIdentityDocumentWithContext(ctx context.Context) (ec2metadata.EC2InstanceIdentityDocument, error) {
	ret := _m.Called(ctx)

	var r0 ec2metadata.EC2InstanceIdentityDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (ec2metadata.EC2InstanceIdentityDocument, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) ec2metadata.EC2InstanceIdentityDocument); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ec2metadata.EC2InstanceIdentityDocument)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetadata provides a mock function with given fields: _a0
func (_m *IEC2MdsSdkClient) GetMetadata(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetadataWithContext provides a mock function with given fields: ctx, resource
func (_m *IEC2MdsSdkClient) GetMetadataWithContext(ctx context.Context, resource string) (string, error) {
	ret := _m.Called(ctx, resource)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, resource)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, resource)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Region provides a mock function with given fields:
func (_m *IEC2MdsSdkClient) Region() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegionWithContext provides a mock function with given fields: ctx
func (_m *IEC2MdsSdkClient) RegionWithContext(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewIEC2MdsSdkClient interface {
	mock.TestingT
	Cleanup(func())
}

// newIEC2MdsSdkClient creates a new instance of IEC2MdsSdkClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newIEC2MdsSdkClient(t mockConstructorTestingTnewIEC2MdsSdkClient) *IEC2MdsSdkClient {
	mock := &IEC2MdsSdkClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
