// Code generated by mockery v2.23.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IConfigurationManager is an autogenerated mock type for the IConfigurationManager type
type IConfigurationManager struct {
	mock.Mock
}

// ConfigureAgent provides a mock function with given fields: folderPath
func (_m *IConfigurationManager) ConfigureAgent(folderPath string) error {
	ret := _m.Called(folderPath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(folderPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUpdateAgentConfigWithOnPremIdentity provides a mock function with given fields:
func (_m *IConfigurationManager) CreateUpdateAgentConfigWithOnPremIdentity() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsConfigAvailable provides a mock function with given fields: folderPath
func (_m *IConfigurationManager) IsConfigAvailable(folderPath string) (bool, error) {
	ret := _m.Called(folderPath)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(folderPath)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(folderPath)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(folderPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIConfigurationManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewIConfigurationManager creates a new instance of IConfigurationManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIConfigurationManager(t mockConstructorTestingTNewIConfigurationManager) *IConfigurationManager {
	mock := &IConfigurationManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
