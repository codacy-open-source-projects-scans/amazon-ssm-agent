// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// T is an autogenerated mock type for the T type
type T struct {
	mock.Mock
}

// GenerateCompressedFileName provides a mock function with given fields: _a0
func (_m *T) GenerateCompressedFileName(_a0 string) string {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GenerateCompressedFileName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GeneratePlatformBasedFolderName provides a mock function with given fields:
func (_m *T) GeneratePlatformBasedFolderName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GeneratePlatformBasedFolderName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetInstallScriptName provides a mock function with given fields:
func (_m *T) GetInstallScriptName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInstallScriptName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPlatform provides a mock function with given fields:
func (_m *T) GetPlatform() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPlatform")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPlatformVersion provides a mock function with given fields:
func (_m *T) GetPlatformVersion() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPlatformVersion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUninstallScriptName provides a mock function with given fields:
func (_m *T) GetUninstallScriptName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUninstallScriptName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsPlatformDarwin provides a mock function with given fields:
func (_m *T) IsPlatformDarwin() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsPlatformDarwin")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsPlatformUsingSystemD provides a mock function with given fields:
func (_m *T) IsPlatformUsingSystemD() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsPlatformUsingSystemD")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewT creates a new instance of T. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewT(t interface {
	mock.TestingT
	Cleanup(func())
}) *T {
	mock := &T{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
