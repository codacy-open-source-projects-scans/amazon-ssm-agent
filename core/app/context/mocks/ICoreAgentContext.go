// Code generated by mockery v2.23.2. DO NOT EDIT.

package mocks

import (
	appconfig "github.com/aws/amazon-ssm-agent/agent/appconfig"
	context "github.com/aws/amazon-ssm-agent/core/app/context"

	identity "github.com/aws/amazon-ssm-agent/common/identity"

	log "github.com/aws/amazon-ssm-agent/agent/log"

	mock "github.com/stretchr/testify/mock"
)

// ICoreAgentContext is an autogenerated mock type for the ICoreAgentContext type
type ICoreAgentContext struct {
	mock.Mock
}

// AppConfig provides a mock function with given fields:
func (_m *ICoreAgentContext) AppConfig() *appconfig.SsmagentConfig {
	ret := _m.Called()

	var r0 *appconfig.SsmagentConfig
	if rf, ok := ret.Get(0).(func() *appconfig.SsmagentConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.SsmagentConfig)
		}
	}

	return r0
}

// Identity provides a mock function with given fields:
func (_m *ICoreAgentContext) Identity() identity.IAgentIdentity {
	ret := _m.Called()

	var r0 identity.IAgentIdentity
	if rf, ok := ret.Get(0).(func() identity.IAgentIdentity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(identity.IAgentIdentity)
		}
	}

	return r0
}

// Log provides a mock function with given fields:
func (_m *ICoreAgentContext) Log() log.T {
	ret := _m.Called()

	var r0 log.T
	if rf, ok := ret.Get(0).(func() log.T); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.T)
		}
	}

	return r0
}

// With provides a mock function with given fields: _a0
func (_m *ICoreAgentContext) With(_a0 string) context.ICoreAgentContext {
	ret := _m.Called(_a0)

	var r0 context.ICoreAgentContext
	if rf, ok := ret.Get(0).(func(string) context.ICoreAgentContext); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.ICoreAgentContext)
		}
	}

	return r0
}

type mockConstructorTestingTNewICoreAgentContext interface {
	mock.TestingT
	Cleanup(func())
}

// NewICoreAgentContext creates a new instance of ICoreAgentContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewICoreAgentContext(t mockConstructorTestingTNewICoreAgentContext) *ICoreAgentContext {
	mock := &ICoreAgentContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
